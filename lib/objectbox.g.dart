// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'object_box/user_model_box.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(3, 2532902531096367609),
      name: 'AddressBox',
      lastPropertyId: const IdUid(5, 6427511362963713221),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 636015469897794284),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1994572950629151646),
            name: 'street',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 531070133404012218),
            name: 'suite',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2080701229577556031),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6427511362963713221),
            name: 'zipcode',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 801838418407153287),
      name: 'UserBox',
      lastPropertyId: const IdUid(7, 3695225395696290398),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 882918047273113330),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6459200758418769171),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6954220502704522029),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6027484825037388873),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2217483088497470389),
            name: 'addressId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 1617027140447950477),
            relationTarget: 'AddressBox'),
        ModelProperty(
            id: const IdUid(6, 3324665428674090002),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3695225395696290398),
            name: 'website',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 801838418407153287),
      lastIndexId: const IdUid(2, 1617027140447950477),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [8813098035790236823, 827724144120616538],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        267588440891512754,
        1516409905442003886,
        8994701691517113416,
        4636232417776752315,
        6479368086671177304,
        428253914299706163,
        4101105484026853190,
        665273859906297497,
        1446135249894493038,
        4893736343504214163,
        7836856833344339304,
        8153052031023613432
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AddressBox: EntityDefinition<AddressBox>(
        model: _entities[0],
        toOneRelations: (AddressBox object) => [],
        toManyRelations: (AddressBox object) => {},
        getId: (AddressBox object) => object.id,
        setId: (AddressBox object, int id) {
          object.id = id;
        },
        objectToFB: (AddressBox object, fb.Builder fbb) {
          final streetOffset =
              object.street == null ? null : fbb.writeString(object.street!);
          final suiteOffset =
              object.suite == null ? null : fbb.writeString(object.suite!);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final zipcodeOffset =
              object.zipcode == null ? null : fbb.writeString(object.zipcode!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, streetOffset);
          fbb.addOffset(2, suiteOffset);
          fbb.addOffset(3, cityOffset);
          fbb.addOffset(4, zipcodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final streetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final suiteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final zipcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = AddressBox(
              street: streetParam,
              suite: suiteParam,
              city: cityParam,
              zipcode: zipcodeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    UserBox: EntityDefinition<UserBox>(
        model: _entities[1],
        toOneRelations: (UserBox object) => [object.address],
        toManyRelations: (UserBox object) => {},
        getId: (UserBox object) => object.id,
        setId: (UserBox object, int id) {
          object.id = id;
        },
        objectToFB: (UserBox object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final websiteOffset =
              object.website == null ? null : fbb.writeString(object.website!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, usernameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addInt64(4, object.address.targetId);
          fbb.addOffset(5, phoneOffset);
          fbb.addOffset(6, websiteOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final websiteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = UserBox(idParam,
              name: nameParam,
              username: usernameParam,
              email: emailParam,
              phone: phoneParam,
              website: websiteParam);
          object.address.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.address.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AddressBox] entity fields to define ObjectBox queries.
class AddressBox_ {
  /// see [AddressBox.id]
  static final id =
      QueryIntegerProperty<AddressBox>(_entities[0].properties[0]);

  /// see [AddressBox.street]
  static final street =
      QueryStringProperty<AddressBox>(_entities[0].properties[1]);

  /// see [AddressBox.suite]
  static final suite =
      QueryStringProperty<AddressBox>(_entities[0].properties[2]);

  /// see [AddressBox.city]
  static final city =
      QueryStringProperty<AddressBox>(_entities[0].properties[3]);

  /// see [AddressBox.zipcode]
  static final zipcode =
      QueryStringProperty<AddressBox>(_entities[0].properties[4]);
}

/// [UserBox] entity fields to define ObjectBox queries.
class UserBox_ {
  /// see [UserBox.id]
  static final id = QueryIntegerProperty<UserBox>(_entities[1].properties[0]);

  /// see [UserBox.name]
  static final name = QueryStringProperty<UserBox>(_entities[1].properties[1]);

  /// see [UserBox.username]
  static final username =
      QueryStringProperty<UserBox>(_entities[1].properties[2]);

  /// see [UserBox.email]
  static final email = QueryStringProperty<UserBox>(_entities[1].properties[3]);

  /// see [UserBox.address]
  static final address =
      QueryRelationToOne<UserBox, AddressBox>(_entities[1].properties[4]);

  /// see [UserBox.phone]
  static final phone = QueryStringProperty<UserBox>(_entities[1].properties[5]);

  /// see [UserBox.website]
  static final website =
      QueryStringProperty<UserBox>(_entities[1].properties[6]);
}
